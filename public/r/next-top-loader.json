{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "next-top-loader",
  "type": "registry:component",
  "title": "Next Top Loader",
  "description": "A Next.js compatible top loading bar component with automatic navigation detection and customizable progress indicators.",
  "dependencies": [
    "zustand"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/nowts/components/next-top-loader.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { create } from \"zustand\";\n\ntype NextTopLoaderProps = {\n  /**\n   * Color for the TopLoader.\n   * @default \"#3b82f6\"\n   */\n  color?: string;\n  /**\n   * The height for the TopLoader in pixels (px).\n   * @default 3\n   */\n  height?: number;\n  /**\n   * To show spinner or not.\n   * @default true\n   */\n  showSpinner?: boolean;\n  /**\n   * Animation speed in ms for the TopLoader.\n   * @default 200\n   */\n  speed?: number;\n  /**\n   * Timeout in ms before the TopLoader will appear.\n   * @default 0\n   */\n  delay?: number;\n};\n\nconst isAnchorOfCurrentUrl = (currentUrl: string, newUrl: string) => {\n  const currentUrlObj = new URL(currentUrl);\n  const newUrlObj = new URL(newUrl);\n  const currentHash = currentUrlObj.hash;\n  const newHash = newUrlObj.hash;\n\n  return (\n    currentUrlObj.hostname === newUrlObj.hostname &&\n    currentUrlObj.pathname === newUrlObj.pathname &&\n    currentUrlObj.search === newUrlObj.search &&\n    currentHash !== newHash &&\n    currentUrlObj.href.replace(currentHash, \"\") ===\n      newUrlObj.href.replace(newHash, \"\")\n  );\n};\n\nexport const useNextTopLoaderStore = create<{\n  isEnable: boolean;\n  isLoading: boolean;\n  progress: number;\n  disable: () => void;\n  enable: () => void;\n  start: () => void;\n  done: () => void;\n  setProgress: (progress: number) => void;\n}>((set) => ({\n  isEnable: true,\n  isLoading: false,\n  progress: 0,\n  disable: () => set({ isEnable: false }),\n  enable: () => set({ isEnable: true }),\n  start: () => set({ isLoading: true, progress: 0 }),\n  done: () => set({ isLoading: false, progress: 100 }),\n  setProgress: (progress: number) => set({ progress }),\n}));\n\nconst TopLoaderBar = ({\n  color = \"#3b82f6\",\n  height = 3,\n  showSpinner = true,\n  speed = 200,\n}: Pick<NextTopLoaderProps, \"color\" | \"height\" | \"showSpinner\" | \"speed\">) => {\n  const { isLoading, progress } = useNextTopLoaderStore();\n\n  if (!isLoading) return null;\n\n  return (\n    <div\n      className=\"fixed top-0 left-0 z-[9999] pointer-events-none\"\n      style={{\n        width: \"100%\",\n        height: `${height}px`,\n      }}\n    >\n      <div\n        className=\"h-full transition-all ease-out\"\n        style={{\n          backgroundColor: color,\n          width: `${progress}%`,\n          transition: `width ${speed}ms ease-out`,\n          boxShadow: `0 0 10px ${color}, 0 0 5px ${color}`,\n        }}\n      />\n      {showSpinner && (\n        <div\n          className=\"absolute top-1/2 right-4 -translate-y-1/2 animate-spin\"\n          style={{\n            width: `${height * 6}px`,\n            height: `${height * 6}px`,\n            border: `2px solid transparent`,\n            borderTop: `2px solid ${color}`,\n            borderRadius: \"50%\",\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport const NextTopLoader = ({\n  color = \"var(--primary)\",\n  height = 2,\n  showSpinner = true,\n  speed = 200,\n  delay = 0,\n}: NextTopLoaderProps) => {\n  const [mounted, setMounted] = React.useState(false);\n\n  React.useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  React.useEffect(() => {\n    let progressInterval: NodeJS.Timeout;\n    let startTimeout: NodeJS.Timeout;\n\n    const { start, done, setProgress } = useNextTopLoaderStore.getState();\n\n    const startProgress = () => {\n      start();\n      let currentProgress = 0;\n\n      progressInterval = setInterval(() => {\n        currentProgress += Math.random() * 15;\n        if (currentProgress >= 90) {\n          currentProgress = 90;\n          clearInterval(progressInterval);\n        }\n        setProgress(currentProgress);\n      }, 100);\n    };\n\n    const completeProgress = () => {\n      clearInterval(progressInterval);\n      clearTimeout(startTimeout);\n      setProgress(100);\n      setTimeout(() => {\n        done();\n      }, speed);\n    };\n\n    const handleClick = (event: MouseEvent) => {\n      if (useNextTopLoaderStore.getState().isEnable === false) return;\n\n      if (event.ctrlKey || event.metaKey) return;\n\n      try {\n        const target = event.target as HTMLElement;\n        const anchor = target.closest(\"a\");\n\n        if (!anchor) return;\n\n        const currentUrl = window.location.href;\n        const newUrl = anchor.href;\n        const isExternalLink = anchor.target === \"_blank\";\n        const isAnchor = isAnchorOfCurrentUrl(currentUrl, newUrl);\n        const isDisabled = anchor.getAttribute(\"data-toploader-disabled\");\n\n        if (isDisabled === \"true\") return;\n\n        if (newUrl === currentUrl || isAnchor || isExternalLink) {\n          // Quick progress for same page or anchor links\n          start();\n          setTimeout(completeProgress, 50);\n        } else {\n          // Start progress for navigation\n          if (delay === 0) {\n            startProgress();\n          } else {\n            startTimeout = setTimeout(() => {\n              startProgress();\n            }, delay);\n          }\n        }\n      } catch {\n        // Quick progress for any errors\n        start();\n        setTimeout(completeProgress, 50);\n      }\n    };\n\n    // Override history methods to detect navigation completion\n    const originalPushState = window.history.pushState;\n    const originalReplaceState = window.history.replaceState;\n\n    window.history.pushState = function (...args) {\n      completeProgress();\n      return originalPushState.apply(window.history, args);\n    };\n\n    window.history.replaceState = function (...args) {\n      completeProgress();\n      return originalReplaceState.apply(window.history, args);\n    };\n\n    // Listen for popstate (back/forward buttons)\n    const handlePopState = () => {\n      completeProgress();\n    };\n\n    document.addEventListener(\"click\", handleClick);\n    window.addEventListener(\"popstate\", handlePopState);\n\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n      window.removeEventListener(\"popstate\", handlePopState);\n      clearInterval(progressInterval);\n      clearTimeout(startTimeout);\n\n      // Restore original methods\n      window.history.pushState = originalPushState;\n      window.history.replaceState = originalReplaceState;\n    };\n  }, [delay, speed]);\n\n  if (!mounted) return null;\n\n  return createPortal(\n    <TopLoaderBar\n      color={color}\n      height={height}\n      showSpinner={showSpinner}\n      speed={speed}\n    />,\n    document.body\n  );\n};\n\n/**\n * Stop loading of the current top loader bar\n */\nexport const stopLoading = () => {\n  const { setProgress, done } = useNextTopLoaderStore.getState();\n  setProgress(100);\n  setTimeout(() => {\n    done();\n  }, 100);\n};\n",
      "type": "registry:component"
    }
  ],
  "docs": "Important: Add <NextTopLoader /> to your app/layout.tsx file to enable the top loading bar across your application."
}